import  org.junit.AfterClass;
import  org.junit.BeforeClass;
import  org.junit.Before;
import  org.junit.Test;
import static org.junit.Assert.*;
import  java.util.Map;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import static org.evomaster.client.java.controller.db.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import  java.util.List;
import static org.hamcrest.Matchers.*;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2022-05-19T23:58:20.556+02:00[Europe/Berlin]
 * <br>
 * The generated test suite contains 7 tests
 * <br>
 * Covered targets: 280
 * <br>
 * Used time: 0h 0m 1s
 * <br>
 * Needed budget for current results: 100%
 * <br>
 * This file contains test cases that represent failed calls, but not indicative of faults.
 */
public class EM_RPC_1_Test_others {

    
    private static final SutHandler controller = new em.external.org.rpc.thriftncs.ExternalEvoMasterController("removed due to double blind review");
    private static String baseUrlOfSut;
    private static org.thrift.ncs.client.NcsService.Client var_client0_NcsService_Iface;
    
    
    @BeforeClass
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        controller.extractRPCSchema();
        assertNotNull(baseUrlOfSut);
        var_client0_NcsService_Iface = (org.thrift.ncs.client.NcsService.Client) controller.getRPCClient("org.thrift.ncs.client.NcsService$Iface");
    }
    
    
    @AfterClass
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @Before
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test(timeout = 60000)
    public void test_0() throws Exception {
        
        
        org.thrift.ncs.client.Dto res_0 = null;
        {
         int arg0 = 695;
         int arg1 = 5;
         res_0 = var_client0_NcsService_Iface.remainder(arg0,arg1);
        }
        assertEquals(0, res_0.resultAsInt);
        assertTrue(numbersMatch(0.0, res_0.resultAsDouble));
    }
    
    
    @Test(timeout = 60000)
    public void test_1() throws Exception {
        
        
        org.thrift.ncs.client.Dto res_0 = null;
        {
         int arg0 = 695;
         int arg1 = 69;
         res_0 = var_client0_NcsService_Iface.remainder(arg0,arg1);
        }
        assertEquals(5, res_0.resultAsInt);
        assertTrue(numbersMatch(0.0, res_0.resultAsDouble));
        
        
        org.thrift.ncs.client.Dto res_1 = null;
        {
         int arg0 = -386;
         int arg1 = 206;
         res_1 = var_client0_NcsService_Iface.remainder(arg0,arg1);
        }
        assertEquals(-180, res_1.resultAsInt);
        assertTrue(numbersMatch(0.0, res_1.resultAsDouble));
    }
    
    
    @Test(timeout = 60000)
    public void test_2() throws Exception {
        
        
        org.thrift.ncs.client.Dto res_0 = null;
        {
         int arg0 = 695;
         int arg1 = 5;
         res_0 = var_client0_NcsService_Iface.remainder(arg0,arg1);
        }
        assertEquals(0, res_0.resultAsInt);
        assertTrue(numbersMatch(0.0, res_0.resultAsDouble));
        
        
        org.thrift.ncs.client.Dto res_1 = null;
        {
         int arg0 = 577;
         double arg1 = 0.20491354575856158;
         res_1 = var_client0_NcsService_Iface.bessj(arg0,arg1);
        }
        assertEquals(0, res_1.resultAsInt);
        assertTrue(numbersMatch(0.0, res_1.resultAsDouble));
    }
    
    
    @Test(timeout = 60000)
    public void test_3() throws Exception {
        
        
        org.thrift.ncs.client.Dto res_0 = null;
        {
         int arg0 = 695;
         int arg1 = 69;
         res_0 = var_client0_NcsService_Iface.remainder(arg0,arg1);
        }
        assertEquals(5, res_0.resultAsInt);
        assertTrue(numbersMatch(0.0, res_0.resultAsDouble));
        
        
        org.thrift.ncs.client.Dto res_1 = null;
        {
         int arg0 = -386;
         int arg1 = 206;
         res_1 = var_client0_NcsService_Iface.remainder(arg0,arg1);
        }
        assertEquals(-180, res_1.resultAsInt);
        assertTrue(numbersMatch(0.0, res_1.resultAsDouble));
        
        
        org.thrift.ncs.client.Dto res_2 = null;
        {
         double arg0 = 0.4946194136502534;
         double arg1 = 0.01538437917072677;
         res_2 = var_client0_NcsService_Iface.gammq(arg0,arg1);
        }
        assertEquals(0, res_2.resultAsInt);
        assertTrue(numbersMatch(0.8575631119535299, res_2.resultAsDouble));
    }
    
    
    @Test(timeout = 60000)
    public void test_4() throws Exception {
        
        
        org.thrift.ncs.client.Dto res_0 = null;
        {
         int arg0 = 699;
         int arg1 = 22;
         res_0 = var_client0_NcsService_Iface.remainder(arg0,arg1);
        }
        assertEquals(17, res_0.resultAsInt);
        assertTrue(numbersMatch(0.0, res_0.resultAsDouble));
        
        
        org.thrift.ncs.client.Dto res_1 = null;
        {
         int arg0 = 266;
         double arg1 = 0.06344924296656074;
         res_1 = var_client0_NcsService_Iface.expint(arg0,arg1);
        }
        assertEquals(0, res_1.resultAsInt);
        assertTrue(numbersMatch(0.003540740552844063, res_1.resultAsDouble));
    }
    
    
    @Test(timeout = 60000)
    public void test_5() throws Exception {
        
        
        org.thrift.ncs.client.Dto res_0 = null;
        {
         int arg0 = 699;
         int arg1 = 22;
         res_0 = var_client0_NcsService_Iface.remainder(arg0,arg1);
        }
        assertEquals(17, res_0.resultAsInt);
        assertTrue(numbersMatch(0.0, res_0.resultAsDouble));
        
        
        org.thrift.ncs.client.Dto res_1 = null;
        {
         int arg0 = 266;
         double arg1 = 0.06344924296656074;
         res_1 = var_client0_NcsService_Iface.expint(arg0,arg1);
        }
        assertEquals(0, res_1.resultAsInt);
        assertTrue(numbersMatch(0.003540740552844063, res_1.resultAsDouble));
        
        
        org.thrift.ncs.client.Dto res_2 = null;
        {
         int arg0 = 281;
         int arg1 = 353;
         double arg2 = 0.15497499480308297;
         res_2 = var_client0_NcsService_Iface.fisher(arg0,arg1,arg2);
        }
        assertEquals(0, res_2.resultAsInt);
        assertTrue(numbersMatch(0.0, res_2.resultAsDouble));
    }
    
    
    @Test(timeout = 60000)
    public void test_6() throws Exception {
        
        
        org.thrift.ncs.client.Dto res_0 = null;
        {
         int arg0 = 443;
         int arg1 = 22;
         res_0 = var_client0_NcsService_Iface.remainder(arg0,arg1);
        }
        assertEquals(3, res_0.resultAsInt);
        assertTrue(numbersMatch(0.0, res_0.resultAsDouble));
        
        
        org.thrift.ncs.client.Dto res_1 = null;
        {
         int arg0 = 266;
         double arg1 = 0.06344924296656074;
         res_1 = var_client0_NcsService_Iface.expint(arg0,arg1);
        }
        assertEquals(0, res_1.resultAsInt);
        assertTrue(numbersMatch(0.003540740552844063, res_1.resultAsDouble));
        
        
        org.thrift.ncs.client.Dto res_2 = null;
        {
         int arg0 = -231;
         int arg1 = 353;
         double arg2 = 0.15497499480308297;
         res_2 = var_client0_NcsService_Iface.fisher(arg0,arg1,arg2);
        }
        assertEquals(0, res_2.resultAsInt);
        assertTrue(numbersMatch(0.0, res_2.resultAsDouble));
        
        
        org.thrift.ncs.client.Dto res_3 = null;
        {
         double arg0 = 0.2613271538570535;
         double arg1 = 0.5966868549463663;
         res_3 = var_client0_NcsService_Iface.gammq(arg0,arg1);
        }
        assertEquals(0, res_3.resultAsInt);
        assertTrue(numbersMatch(0.1356376518614868, res_3.resultAsDouble));
    }


}
